services:
  db:
    restart: always
    image: postgres:17.2
    container_name: well_monitoring_service_db
    hostname: ${DB_HOST}
    env_file:
      - ./.env
    networks:
      - well_monitoring_network
    ports:
      - "${DB_OUT_PORT}:5432"
    volumes:
      - ./db_dumps:/dump/
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:latest
    container_name: well_monitoring_service_redis
    hostname: ${REDIS_HOST}
    env_file:
      - ./.env
    ports:
      - "${REDIS_IN_PORT}:${REDIS_PORT}"
    command: redis-server --requirepass ${REDIS_PASSWORD}
    networks:
      - well_monitoring_network
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli -a $REDIS_PASSWORD ping | grep PONG" ]
      start_period: 2s
      interval: 1s
      timeout: 2s
      retries: 15
    restart: unless-stopped


  backend:
    image: well-monitoring-python
    build:
      dockerfile: ./Dockerfile
    container_name: well_monitoring_service
    command: uvicorn app.main:app --host 0.0.0.0 --port $PORT --workers 1 --reload
    ports:
      - "9003:9003"
    depends_on:
      - db
      - redis
    env_file:
      - ./.env
    networks:
      - well_monitoring_network
    volumes:
      - ./:/srv
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://0.0.0.0:9003/docs || exit 1" ]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 1m
    restart: unless-stopped

  celery:
    image: well-monitoring-python
    container_name: well_monitoring_celery
    command: watchmedo auto-restart --directory=/srv/app --pattern=*.py --recursive -- celery -A app.celery worker -l INFO -c 1 -Q celery -n celery_matbalance_worker
    depends_on:
      - backend
      - redis
    env_file:
      - .env
    volumes:
      - ./:/srv
    networks:
      - well_monitoring_network

  whodb:
    image: clidey/whodb
    container_name: well_monitoring_whodb
    depends_on:
      - db
    ports:
      - "8080:8080"
    networks:
      - well_monitoring_network

volumes:
  postgres_data:
    driver: local

networks:
  well_monitoring_network:
    name: well_monitoring_network
    driver: bridge
